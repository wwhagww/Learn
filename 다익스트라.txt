한 정점에서 모든 정점까지의 최단거리를 각각 구하는 알고리즘

조건
그래프 방향 유무 상관없음
음수 사이클 존재하면 사용 불가 / 음수 간선은 구현에 따라 허용

과정
출발점에서 모든 노드까지의 거리를 담을 리스트 초기화
현재 노드를 출발점으로 설정
우선순위 큐 생성 

반복: 큐가 다 빌때까지
0. 현재 노드가 미방문 노드인지 확인 후 방문 처리
1. 현재 노드의 이웃 노드 거리 갱신
  이전까지의 출발점-이웃노드 (최소)거리 vs 현재노드를 거쳐가는 거리 비교
2. 현재 노드를 미방문 노드 중 출발점으로부터의 거리 최소인 노드로 변경
  우선순위 큐로 구현 (거리, 노드) 로그 시간 소모
  큐에 추가된 노드가 차례가 오지 않고 최소거리가 다시 갱신되면 여러번 들어갈 수 있음
  따라서 루프 앞에서 현재 노드가 미방문 노드인지 확인해야함

배열
삽입/수정 O(1)
출력 O(N)  모든 노드 순회

우선순위 큐
- 이진힙 (일반적으로 사용)
삽입/수정 O(lg N)
출력 O(lg N)

- 피보나치 힙 (연산시간 크고 구현 복잡)
삽입/수정 O(1) 평균
출력 O(lg N)




의사코드
function Dijkstra(Graph, Source):
 
    dist[source] ← 0                       // 소스와 소스 사이의 거리 초기화 --출발지와 출발지의 거리는 당연히 0--
    prev[source] ← undefined               // 출발지 이전의 최적 경로 추적은 없으므로 Undefined

    create vertex set Q                    // 노드들의 집합 Q(방문되지 않은 노드들의 집합) 생성 시작

    for each vertex v in Graph:            // Graph안에 있는 모든 노드들의 초기화
        if v ≠ source:                     // V 노드가 출발지가 아닐 경우(출발지를 제외한 모든 노드!)
            dist[v] ← INFINITY             // 소스와 V노드 사이에 알려지지 않은 거리 --얼마나 먼지 모르니까-- = 무한값 (모든 노드들을 초기화하는 값)
            prev[v] ← UNDEFINED            // V노드의  최적경로 추적 초기화
        add v to Q                         // Graph에 존재하고 방금 전 초기화된 V 노드를 Q(방문되지 않은 노드들의 집합)에 추가

    //요약하자면, Graph에 존재하는 모든 노드들을 초기화한 뒤, Q에 추가함.
    
    while Q is not empty:                  // Q 집합이 공집합 아닐 경우, 루프 안으로!
        u ← vertex in Q with min dist[u]   // 첫번째 반복에서는 dist[source]=0이 선택됨. 즉, u=source에서 시작
        remove u from Q                    // U 노드를 방문한 것이므로 Q집합에서 제거
        
        for each neighbor v of u:          // U의 이웃노드들과의 거리 측정
            alt ← dist[u] + length(u, v)   // 출발지 노드 부터 계산된 U노드까지의 거리 + V에서 U의 이웃노드까지의 거리
                                           // = source to U + V to U = source to U
            if alt < dist[v]:              // 방금 V노드까지 계산한 거리(alt)가 이전에 V노드까지 계산된 거리(dist[v])보다 빠른 또는 가까운 경우
                dist[v] ← alt              // V에 기록된 소스부터 V까지의 최단거리를 방금 V노드까지 계산한 거리로 바꿈
                prev[v] ← u                // 제일 가까운 노드는 지금 방문하고 있는 노드(U)로 바꿈

    return dist[], prev[]                  // 계산된 거리값과 목적지를 리턴


구현방법
- 배열 내 선형탐색 / 중복 정점 비허용
O(V2 + E)
다음노드(최소거리 미방문 노드) 결정할 때 V, 을 V번
이웃노드 최단거리 갱신에 E (각 노드마다 모든 이웃 확인)

- 우선순위큐 / 중복 정점 비허용
O(VlogV + ElogV)
다음 노드 결정에 VlogV
최단거리 갱신에 ElogV (정확한 구현 모르겠음)
우선순위큐 길이가 V(에 비례)여야함. 중복정점 없다는게 이 뜻
change_key(새로운비용, 비용이바뀔정점) 함수로 최단거리갱신이 logV
우선순위큐에서 갱신할 정점을 찾아서(해시, 딕셔너리 이용 O(1)) 
위치 바꾸기(그 정점과 위치가 바뀌는 정점의 위치도 수정해야해서 까다로움)

- 우선순위큐 / 중복 정점 허용
O(ElogE + ElogE) 음수 간선 허용 ...? 나무위키 못 믿겠음
최단거리 노드 찾는데 ElogE
최단거리 갱신에 ElogE
(모든 경우 갱신되면 우선순위큐 길이는 E)
